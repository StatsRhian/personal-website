{
  "hash": "f340fb87556eb4034f05033d60a5767d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Spring clean your R packages\ndescription: \"Give your R packages a spring clean with these helper functions from the usethis package.\"\ndate: 2024-03-07\ncategories: [R, packages, usethis, ci-cd]\nimage: \"featured.jpg\"\nimg-alt: \"Jumping Rivers robot using a vacuum cleaner to tidy up a large mess of data and numbers on the floor.\"\nexecute:\n  eval: false\n---\n\n\n\nLast year I inherited a couple of R packages from [Stephanie Locke](https://www.linkedin.com/in/stephanielocke/) including the fabulous [{datasauRus}](https://github.com/jumpingrivers/datasauRus). Some of these packages were developed a long time ago and hadn't been updated. Since then, the standards in R package development have changed a little and I thought it was time to have a little spring clean.\n\nIn this blog post, I'll be using functions from the [{usethis} package](https://usethis.r-lib.org/) to spruce up some of these old packages. I've chosen five quick improvements which you should be able to implement in 15 minutes or less. Grab your duster and come along.\n\n### Rename master to main\n\nThere are many [good reasons](https://www.jumpingrivers.com/blog/git-moving-master-to-main/) to move the default branch name from `master` to the more neutral name, `main`. Luckily, renaming a single repository is straightforward and this one command will basically do everything for you.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::git_default_branch_rename()\n```\n:::\n\n\n\n### Tidy your description file\n\nYour `DESCRIPTION` file is argubly the most important file in your R package as it defines the purpose of your code and contains important metadata. Take a minute to check that the key fields are still correct, in particular the contact email address, description and any URLs.\n\nYou can then run\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_tidy_description()\n```\n:::\n\n\n\nwhich will put the fields in a standard order and alphabetise the dependencies. It's looking tidier already. ðŸ˜Œ\n\n### Migrate to GitHub Actions\n\nTravisCI used to be the most popular tool for continuous integration in the #RStats community. In recent years, many R package developers have moved away from [Travis CI](https://ropensci.org/blog/2020/11/19/moving-away-travis/) to [GitHub Actions](https://docs.github.com/en/actions). Dean Attali wrote a [detailed guide](https://deanattali.com/blog/migrating-travis-to-github/) explaining the migration process in full. However, for most simple packages, all we need to do is delete the existing `travis.yml` file, and then run \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github_action(\"check-standard\")\n```\n:::\n\n\n\nto set up the standard GitHub action. This action will run `R CMD check` using R-latest on Linux, Mac, and Windows. This is a good baseline if you plan on submitting your package to CRAN. It will also add a lovely badge to your `README.md` that will show users that your package is passing the check.\n\nIf your R package has tests, you might also want to run \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_github_action(\"code-coverage\")\n```\n:::\n\n\n\nwhich will calculate your test coverage and report to [codecov.io](https://about.codecov.io).\n\n### Create a hex sticker\n\nWe all know that the most important part of any R package is the hex sticker. If you don't already have one, you easily can create one in R with [{hexSticker}](https://github.com/GuangchuangYu/hexSticker).\n\nYou can choose any image or plot to position on your sticker. You can then customise it by changing the colours, fonts and adding a url.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsticker(subplot = \"hoover.png\", s_x=1, s_y=.75,\n        h_fill = \"#4898a8\", h_color = \"#516e7a\",\n        package = \"springClean\", p_size=20,\n        url = \"jumpingrivers.com\", u_color = \"#FFFFFF\", u_size = 6,\n        filename = \"sticker.png\")\n```\n:::\n\n\n\n<img src=\"sticker.png\" alt=\"A hexsticker with for a fictional package springClean. There is a robot with a vacuum in the middle.\" style=\"display: block; margin-left: auto; margin-right: auto; width: 200px\"/>\n\nYou can add the hex sticker as a logo to your package with another helpful {usethis} function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_logo(\"sticker.png\")\n```\n:::\n\n\n\n### Contributing and Code of Conduct\n\nOne of the great things about R package developement is that it's a team effort. If you want people to contribute to the development of your R packages, you need to tell them _how_ to contribute. It's also a good idea to add a code of conduct, to set an example of how we should work together.\n\nI like the standard contributing and CoC guides that the tidyverse developers use. Again, {usethis} provides functions that make adding these files to your package really easy.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::use_tidy_contributing()\nusethis::use_coc(contact = \"hello@jumpingrivers.com\")\n```\n:::\n\n\n\n### Get involved\n\nThat's it for our quick spring clean. Hopefully I've inspired you get your duster out and have a tidy too! ðŸ§¹\n\n---\n\nA version of this post first appeared at [jumpingrivers.com/blog](https://www.jumpingrivers.com/blog/spring-clean-r-package-usethis/).\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}